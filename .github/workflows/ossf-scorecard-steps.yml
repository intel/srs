on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'repo'
        required: true
        type: string
      rate-limit:
        description: 'rate limit'
        required: false
        default: 150
        type: number
  workflow_call:
    inputs:
      repo:
        description: 'repo'
        required: true
        default: ''
        type: string
      rate-limit:
        description: 'rate limit'
        required: false
        default: 150
        type: number
    secrets:
      GHPAT:
        required: true

jobs:
  ossf-scorecard:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.official.output.result }}
    steps:
      - name: generate save directory name
        shell: bash
        id: vars
        run: |
          SREPO=$(echo -n ${{ inputs.repo }} | tr '/' .)
          echo "SREPO set to ${SREPO}"
          echo "SREPO=${SREPO}" >> $GITHUB_OUTPUT

      - name: get official score
        id: official
        run: |
          curl https://api.securityscorecards.dev/projects/github.com/${{ inputs.repo }} > ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json
          if [ -s ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json ]; then
            echo result=1 >> $GITHUB_OUTPUT
          else
            echo result=0 >> $GITHUB_OUTPUT
          fi

      - name: rate limit
        if: steps.official.outputs.result == '0'
        env:
          GHPAT: ${{ secrets.GHPAT }}
        run: |
          rl=$(curl -H "Authorization: token $GHPAT" -X GET https://api.github.com/rate_limit | jq '.rate.remaining')
          echo "Rate limit remaining: $rl"
          while [ $rl -lt ${{ inputs.rate-limit }} ]; do
            sleep 1h
            rl=$(curl -H "Authorization: token $GHPAT" -X GET https://api.github.com/rate_limit | jq '.rate.remaining')
            echo "Rate limit remaining: $rl"
          done

      - name: save results
        uses: actions/upload-artifact@v3
        if: steps.official.outputs.result == '1'
        with:
          retention-days: 10
          name: ${{ steps.vars.outputs.SREPO }}.ossf-scorecard
          path: ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json

  ossf-docker:
    needs: ossf-scorecard
    runs-on: ubuntu-latest
    if: needs.ossf-scorecard.outputs.result == '0'
    container:
      image: gcr.io/openssf/scorecard:stable
      env:
        GITHUB_AUTH_TOKEN: ${{ secrets.GHPAT }}
    outputs:
      json: ${{ steps.docker.outputs.json }}
    steps:
      - name: Run scorecard
        id: docker
        run: echo json=$(/scorecard --repo=${{ inputs.repo }} --format=json) >> $GITHUB_OUTPUT

  ossf-docker-save:
    needs: ossf-docker
    runs-on: ubuntu-latest
    if: needs.ossf-scorecard.outputs.result == '0'
    steps:
      - name: get json
        run: echo ${{ needs.ossf-docker.outputs.json }} > ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json

      - name: save results
        uses: actions/upload-artifact@v3
        with:
          retention-days: 10
          name: ${{ steps.vars.outputs.SREPO }}.ossf-scorecard
          path: ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json
